import cv2
import numpy as np
import matplotlib.pyplot as plt

def canny(image):
    canny = cv2.Canny(blur, 50, 150)
    return(canny)

def display_lines(image, lines):
    line_image = np.zeros_like(image)
    if lines is not None:
        for x1, y1, x2, y2 in lines:
            cv2.line(line_image, (x1, y1), (x2, y2), (200, 0, 255), 10)
    return line_image

def region_of_interest(image):
    height = image.shape[0]
    polygon = np.array([[(125,height), (875,height), (475,300)]])
    mask = np.zeros_like(image)
    cv2.fillPoly(mask, polygon, 255)
    masked_image = cv2.bitwise_and(image, mask)
    return masked_image
    
def make_coordinates(image, line_parameters):
    try:
        slope, intercept = line_parameters
    except TypeError:
        slope, intercept = 0.00001, 1
    y1 = image.shape[0]
    y2 = int(y1*(3/5))
    x1 = int((y1 - intercept)/slope)
    x2 = int((y2 - intercept)/slope)
    return np.array([x1, y1, x2, y2])

def avg_slope_intercept(image, lines):
    left_fit = []
    right_fit = []
    for line in lines:
        x1, y1, x2, y2 = line.reshape(4)
        parameters = np.polyfit((x1, x2), (y1, y2), 1)
        slope = parameters[0]
        intercept = parameters[1]
        if slope < 0:
            left_fit.append((slope, intercept))
        else:
            right_fit.append((slope,intercept))
    left_fit_average = np.average(left_fit, axis=0)
    right_fit_average = np.average(right_fit, axis=0)
    left_line = make_coordinates(image, left_fit_average)
    right_line = make_coordinates(image, right_fit_average)
    return np.array([left_line, right_line])
  
img = r'C:\Users\adith\Desktop\computer vision\solidWhiteRight.jpg'
image = cv2.imread(img)
lane_image = np.copy(image)

#to convert the image to gray scale
gray = cv2.cvtColor(lane_image, cv2.COLOR_RGB2GRAY)
#denoising the gray image
dns = cv2.fastNlMeansDenoising(gray,None,3,7,21)
#using GaussianBlur filter to further smoothen the image
blur = cv2.GaussianBlur(dns, (5, 5), 0)

#canny edge detection
canny_image = canny(blur)

cropped_image = region_of_interest(canny_image)
lines = cv2.HoughLinesP(cropped_image, 2, np.pi/180, 100, np.array([]), minLineLength=40, maxLineGap=5)
avg_lines = avg_slope_intercept(lane_image,lines)
line_image = display_lines(lane_image, avg_lines)
final_image = cv2.addWeighted(lane_image, 0.8, line_image, 1, 1)


cv2.imshow("img", image)
cv2.waitKey(0)

cv2.imshow("img", gray)
cv2.waitKey(0)

cv2.imshow("img", dns)
cv2.waitKey(0)

cv2.imshow("img", blur)
cv2.waitKey(0)

cv2.imshow("img", canny_image)
cv2.waitKey(0)

cv2.imshow("img", cropped_image)
cv2.waitKey(0)

#final o/p
cv2.imshow("img", final_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
